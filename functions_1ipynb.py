# -*- coding: utf-8 -*-
"""Functions_1ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1n1fXCGH_Kk-acToHIm9mQsimpjKO1m7F
"""

def loan_emi(amount):
    emi = amount/12
    print("The EMI is ${}".format(emi))

loan_emi(126000)

def loan_emi(amount, duration):
    emi = amount/duration
    print("The EMI is ${}:".format(emi))

loan_emi(126000,8*12)

loan_emi(126000, 10*12)

# return values

def loan_emi(amount, duration):
    emi = amount/duration
    return emi

emi1 = loan_emi(1260000, 8*12)

emi2 = loan_emi(1260000, 10*12)

emi1

emi2

#adding optional arguments

def loan_emi(amount, duration, down_payment):
    loan_amount = amount - down_payment
    emi = loan_amount/duration
    return emi

emi3 = loan_emi(1260000,8*12,0)

emi4 = loan_emi(1260000, 8*12, 300000)

emi3

emi4

# EMI formula

"""EMI = Pxrx(1+r)^n/(1+r)^n-1

"""

def loan_emi(amount, duration, interest_rate, down_payment):
    loan_amount = amount- down_payment
    emi = loan_amount * interest_rate * (1+interest_rate)**duration // ((1+interest_rate)** duration-1)
    return emi

emi5 = loan_emi(1260000, 10*12, 0.1/12, 0)

emi5

emi6 = loan_emi(1260000, 8*12, 0.1/12, 300000)

emi6

import math
def loan_emi(amount, duration, interest_rate, down_payment):
    loan_amount = amount-down_payment
    emi = loan_amount * interest_rate * (1+interest_rate)**duration // ((1+interest_rate)** duration-1)
    emi = math.ceil(emi)
    return emi

emi7 = loan_emi(1260000, 8*12, 0.1/12, 0)

emi7

emi8 = loan_emi(1260000, 10*12, 0.08/12, 300000 )

emi8

if emi7<emi8:
   print("Option 1 has lower EMI of {} per month".format(emi7))
else:
    print('Option 2 has lower EMI of {} per month'.format(emi8))





"""> **Q**: Shaun is currently paying back a home loan for a house he bought a few years ago. The cost of the house was `$800,000`. Shaun made a down payment of `25%` of the price. He financed the remaining amount using a 6-year loan with an interest rate of `7%` per annum (compounded monthly). Shaun is now buying a car worth `$60,000`, which he is planning to finance using a 1-year loan with an interest rate of `12%` per annum. Both loans are paid back in EMIs. What is the total monthly payment Shaun makes towards loan repayment?

This question is now straightforward to solve, using the `loan_emi` function we've already defined.

"""

house_cost = 800000
house_down_payment = 0.25*800000
house_duration = 6*12
house_interest_rate = 0.07/12
house_emi = loan_emi(house_cost, house_duration, house_interest_rate, house_down_payment)
house_emi

cost_of_car = 60000
car_duration = 1*12
car_interest_rate = .12/12
car_down_payment = 0
car_emi = loan_emi(cost_of_car, car_duration, car_interest_rate,car_down_payment)
car_emi

Total_emi = car_emi + house_emi

print('Shaun pays about ${} towards monthly payments for both car and house'.format(Total_emi))



"""### Exceptions and `try`-`except`

> Q: If you borrow `$100,000` using a 10-year loan with an interest rate of 9% per annum, what is the total amount you end up paying as interest?

One way to solve this problem is to compare the EMIs for two loans: one with the given rate of interest and another with a 0% rate of interest. The total interest paid is then simply the sum of monthly differences over the duration of the loan.
"""

emi_interest = loan_emi(100000, 10*12,0.09/12, 0)

emi_interest

wmi_without_interest = loan_emi(100000, 10*12, 0./12, 0)



"""try:
    print("Now computing the result..")
    result = 5 / 0
    print("Computation was completed successfully")
except ZeroDivisionError:
    print("Failed to compute result because you were trying to divide by zero")
    result = None

print(result)
"""

def loan_emi(amount, duration, interest_rate, down_payment):
    loan_amount = amount - down_payment
    try:
        emi = loan_amount * interest_rate * (1+interest_rate)**duration // ((1+interest_rate)**duration-1)
    except ZeroDivisionError:
        emi = loan_amount/duration
    emi = math.ceil(emi)
    return emi



"""We can use the updated `loan_emi` function to solve our problem.

> **Q**: If you borrow `$100,000` using a 10-year loan with an interest rate of 9% per annum, what is the total amount you end up paying as interest?

"""

emi_with_interest = loan_emi(100000, 10*12, 0.09/12, 0)
emi_with_interest

emi_without_interest = loan_emi(100000, 10*12, 0,0)
emi_without_interest

total_interest_rate = (emi_interest - emi_without_interest)*10*12

total_interest_rate

# Documenting functions using docstrings

def loan_emi(amount, duration, interest_rate, down_payment):
    """ Calculates the equal monthly installments (EMI) for a loan
        Arguments:
          amount = loan amount taken
          down_payment(optional) = deposit paid (if any)
          interest_rate = Interest rate (calculated monthly)
          duration = duration of the loan (in months)

    """
    loan_amount = amount - down_payment
    try:
        emi = loan_amount*interest_rate*(1+interest_rate)**duration // ((1+interest_rate)** duration -1)
    except ZeroDivisionError:
        emi = loan_amount/duration
    emi = math.ceil (emi)
    return emi

help(loan_emi)

import math
def cost_of_trip(Flight_cost, Hotel_cost, car_rental_cost, duration_of_trip):
    """ Calculates the total cost of the trip.
        Arguments:
        Flight_cost = Total return flight cost
        Hotel_cost = cost of the hotel per day
        car_rental_cost = Rental cost of the car per week
        duration_of_trip = No. of days for the trip
    """
    duration_of_trip_weeks = math.ceil(duration_of_trip/7)
    Spend_for_the_trip = Flight_cost + (Hotel_cost*duration_of_trip) + (car_rental_cost*duration_of_trip_weeks)


    if Spend_for_the_trip <=1000:
        print("The spend for this trip ${} is within my limits".format(Spend_for_the_trip))

    else:
        print("The spend for this trip ${} is over my budget".format(Spend_for_the_trip))

#If you're planning a 1-week long trip, which city should you visit to spend the least amount of money?

#Paris trip spen

cost_of_trip(200, 20,200,7)

#London trip costs
cost_of_trip(250,30,120,7)

#dubai
cost_of_trip(370,15,80,7)

#Mumbai

cost_of_trip(450,10,70,7)

