# -*- coding: utf-8 -*-
"""Analyzing data with Pandas.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Brk8EC6U2s-ZLeBJOKa3lFv6FQDhcdwo
"""

from urllib.request import urlretrieve

italy_covid_url = 'https://gist.githubusercontent.com/aakashns/f6a004fa20c84fec53262f9a8bfee775/raw/f309558b1cf5103424cef58e2ecb8704dcd4d74c/italy-covid-daywise.csv'

urlretrieve(italy_covid_url, 'italy-covid-daywise.csv')

#reding the file

!pip install pandas --upgrade --quiet

import pandas as pd

covid_df = pd.read_csv('italy-covid-daywise.csv')

type(covid_df)

covid_df

# View basic info using info method

covid_df.info()

# View statistical info by using .describe method

covid_df.describe()

covid_df.columns

#retrieve the no of rows and columns using .shape
covid_df.shape

covid_df['new_cases']

type(covid_df['new_cases'])

#retrieve a specific value within a series

covid_df['new_cases'][200]

covid_df['new_cases'][200]

# use at menthod to retrieve values from a specific row and column by using .at method
covid_df.at[246,'new_cases']

covid_df.at[246,'new_tests']

# retrieve data under a column using . columnn name

covid_df.new_cases

# accessing subset of dataframes within a dataset

from datetime import date
cases_df = covid_df[['date', 'new_cases']]
cases_df

covid_df_copy = covid_df.copy()

covid_df.loc[240]

type(covid_df.loc[240])

covid_df.head(5)

covid_df.tail(5)

# We can find the first index that doesn't contain a NaN value using a column's first_valid_index method.
covid_df.new_tests.first_valid_index()

#verifying rows before the Nan values by passing a range .loc[100:111]

covid_df.loc[100:111]

#use sample method to retrieve random numbers from the dataset using sample method

covid_df.sample(10)

#Q: What are the total number of reported cases and deaths related to Covid-19 in Italy?
total_cases = covid_df.new_cases.sum()
total_deaths = covid_df.new_deaths.sum()
print("The number of reported cases is {} and the number of reported deaths is {}".format(total_cases, total_deaths))

# Q: What is the overall death rate (ratio of reported deaths to reported cases?
death_rate = total_deaths/total_cases
print("the orverall reported date rate in italy is {} %".format(death_rate*100))

#Q: What is the overall number of tests conducted? A total of 935310 tests were conducted before daily test numbers were reported.

initial_tests = 935310
total_tests = covid_df.new_tests.sum() + initial_tests
total_tests

# Q: What fraction of tests returned a positive result?
positive_rate = total_cases/total_tests
print("{} % of the tests in italy reported a positive result".format(positive_rate*100))

# Querying and sorting rows
high_new_cases = covid_df.new_cases > 1000
high_new_cases

covid_df[high_new_cases]

#combining the above 2 steps
high_new_cases = covid_df[covid_df.new_cases >1000]
high_new_cases



positive_rate

high_ratio_df = covid_df[covid_df.new_cases / covid_df.new_tests > positive_rate]
high_ratio_df

#The result of performing an operation on two columns is a new series
covid_df.new_cases/covid_df.new_tests

# We can use this series to add a new column to the data frame.

covid_df['positive_rate'] = covid_df.new_cases / covid_df.new_tests
covid_df



#removing columns using drop method
covid_df.drop(columns =['positive_rate'], inplace = True)
covid_df



# Sorting values using .sort_values method Highest no of cases
covid_df.sort_values('new_cases',ascending = False). head(10)

# highest no of deaths
covid_df.sort_values('new_deaths', ascending = False). head(10)

#days with least no of cases
covid_df.sort_values('new_cases',ascending = True).head(10)

# looking at the data for a date range - here we look at data from 20 June 2020
covid_df[169:180]

# there was a negative number on June 20 2020. We could do an average on previous day and next day to replace the data on June 20 2020. to do this we can use the .at method.
covid_df.at[172,'new_cases'] = (covid_df.at[171,'new_cases'] + covid_df.at[173, 'new_cases'])/2

covid_df[169:173]

#Working with dates
covid_df.date

covid_df['date'] = pd.to_datetime(covid_df.date)
covid_df['date']

covid_df['year'] = pd.DatetimeIndex(covid_df.date).year
covid_df['month'] = pd.DatetimeIndex(covid_df.date).month
covid_df['day'] = pd.DatetimeIndex(covid_df.date).day
covid_df['weekday'] = pd.DatetimeIndex(covid_df.date).weekday
covid_df

#querying the details for the month may
covid_df_may = covid_df[covid_df.month == 5]

#Extract the number of columns to aggregate
covid_df_metrics = covid_df_may[['new_cases', 'new_deaths','new_tests']]

#get the column wise sum
covid_df_totals = covid_df_metrics.sum()

covid_df_totals

type(covid_df_totals)

#combining operations into a single statment

covid_df[covid_df.month == 5][['new_cases','new_deaths','new_tests']].sum()

#As another example, let's check if the number of cases reported on Sundays is higher than the average number of cases reported every day. This time, we might want to aggregate columns using the `.mean` method.

# calculating avg of new cases column.

covid_df.new_cases.mean()

#Average for sundys

covid_df[covid_df.weekday == 6].new_cases.mean()

#Grouping and Aggregation
#month wise grouping
covid_df_month = covid_df.groupby('month')[['new_cases', 'new_deaths', 'new_tests']].sum()

covid_df_month

#compute avg no of daily new cases, deaths and tests
covid_df_month_mean = covid_df.groupby('month')[['new_cases', 'new_deaths', 'new_tests']].mean()

covid_df_month_mean

#Calculating the cumilative sum of cases, deaths and tests by using .cumsum method

covid_df['total_cases'] = covid_df.new_cases.cumsum()

covid_df['total_deaths'] = covid_df.new_deaths.cumsum()

covid_df['total_tests'] = covid_df.new_tests.cumsum() + initial_tests

covid_df

covid_df.loc[247:277]

#Merging data from multiple sources

urlretrieve('https://gist.githubusercontent.com/aakashns/8684589ef4f266116cdce023377fc9c8/raw/99ce3826b2a9d1e6d0bde7e9e559fc8b6e9ac88b/locations.csv',
            'locations.csv')

locations_df = pd.read_csv('locations.csv')

locations_df

locations_df[locations_df.location == 'Italy']

#create a column in the 1st dataset with a column name location
covid_df['location'] = 'Italy'
covid_df

# We can now add the columns from locations_df into covid_df using the .merge method.
merged_df = covid_df.merge(locations_df, on='location')
merged_df

# We can now calculate metrics like cases per million, deaths per million, and tests per million.
merged_df['cases_per_million'] = merged_df.total_cases *1e6 / merged_df.population
merged_df['deaths_per_million'] = merged_df.total_deaths*1e6 / merged_df.population
merged_df['tests_per_million'] = merged_df.total_tests * 1e6 / merged_df.population

merged_df

#Writing back to file
result_df = merged_df[['date','new_cases','total_cases','new_deaths','total_deaths','new_tests','total_tests', 'cases_per_million', 'tests_per_million', 'deaths_per_million']]
result_df

# write the data from the data frame to a file using the to_csv function
result_df.to_csv('results.csv', index = None)

# Basic plotting with Pandas

#in pandas the we can plot graphs using .plot method
#Plot a line graph showing the number of cases over time

result_df.new_cases.plot()

# inserting date column as an index  to the dataframe
result_df.set_index('date', inplace =True)

result_df

result_df.set_index('date', inplace = True)

result_df['date'] = pd.to_datetime(result_df.date)

result_df

result_df.date

covid_df

covid_df.new_cases.plot()

merged_df.set_index('date', inplace = True)

merged_df

merged_df.loc['2020-09-01']

# Plot cases and new deaths as per day in line graphs
merged_df.new_cases.plot()
merged_df.new_deaths.plot()

#compare total cases vs total deaths
merged_df.total_cases.plot()
merged_df.total_deaths.plot()

#lets see how death rates vs positive testing rates vary over time
death_rate = merged_df.total_deaths / merged_df.total_cases
death_rate.plot(title = 'Death Rate')

positive_rates= merged_df.total_cases/merged_df.total_tests
positive_rates.plot(title = 'Positive Rates')

#Bar chart to visualise the trend at a higher level month wise
merged_df.new_cases.plot(kind = 'bar')

#Grouping and Aggregation
#month wise grouping
merged_df_month = merged_df.groupby('month')[['new_cases', 'new_deaths', 'new_tests']].sum()

merged_df_month

merged_df_month.new_cases.plot(kind = 'bar')

merged_df_month.new_tests.plot(kind = 'bar')

